// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"
	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// TargetDao is the data access object for table target.
type TargetDao struct {
	table   string        // table is the underlying table name of the DAO.
	group   string        // group is the database configuration group name of current DAO.
	columns TargetColumns // columns contains all the column names of Table for convenient usage.
}

// TargetColumns defines and stores column names for table target.
type TargetColumns struct {
	DeviceId       string // device id
	Os             string // device os specification
	Brand          string // device brand
	Model          string // device model
	TzName         string // time zone name
	AppId          string // app id
	AppVersion     string // app version string
	PushSdkVersion string // push sdk version string
	CreateTime     string // create time of target
}

//  targetColumns holds the columns for table target.
var targetColumns = TargetColumns{
	DeviceId:       "device_id",
	Os:             "os",
	Brand:          "brand",
	Model:          "model",
	TzName:         "tz_name",
	AppId:          "app_id",
	AppVersion:     "app_version",
	PushSdkVersion: "push_sdk_version",
	CreateTime:     "create_time",
}

// NewTargetDao creates and returns a new DAO object for table data access.
func NewTargetDao() *TargetDao {
	return &TargetDao{
		group:   "mysql",
		table:   "target",
		columns: targetColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *TargetDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *TargetDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *TargetDao) Columns() TargetColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *TargetDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *TargetDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *TargetDao) Transaction(ctx context.Context, f func(ctx context.Context, tx *gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
