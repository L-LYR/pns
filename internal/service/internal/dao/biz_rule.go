// =================================================================================
// This is auto-generated by GoFrame CLI tool only once. Fill this file as you wish.
// =================================================================================

package dao

import (
	"context"

	"github.com/L-LYR/pns/internal/model"
	"github.com/L-LYR/pns/internal/service/internal/dao/internal"
	"github.com/L-LYR/pns/internal/service/internal/do"
)

// bizRuleDao is the data access object for table biz_rule.
// You can define custom methods on it to extend its functionality as you wish.
type bizRuleDao struct {
	*internal.BizRuleDao
}

var (
	// BizRule is globally public accessible object for table biz_rule operations.
	BizRule = bizRuleDao{
		internal.NewBizRuleDao(),
	}
)

// Fill with you ideas below.

func InsertBizRule(ctx context.Context, rule *model.BizRule) error {
	_, err := BizRule.Ctx(ctx).Insert(
		do.BizRule{
			Name:        rule.Name,
			Description: rule.Description,
			Salience:    rule.Salience,
			Content:     rule.Content,
			Status:      rule.Status,
		},
	)
	return err
}

func QueryBizRule(ctx context.Context, name string) (*model.BizRule, error) {
	record, err := BizRule.Ctx(ctx).Where("name", name).One()
	if err != nil {
		return nil, err
	}
	if record == nil {
		return nil, nil
	}
	rule := &model.BizRule{}
	if err := record.Struct(rule); err != nil {
		return nil, err
	}
	return rule, nil
}

func LoadAllRules(ctx context.Context) ([]*model.BizRule, error) {
	records, err := BizRule.Ctx(ctx).All()
	if err != nil {
		return nil, err
	}
	result := make([]*model.BizRule, records.Len())
	if err := records.Structs(&result); err != nil {
		return nil, err
	}
	return result, nil
}
