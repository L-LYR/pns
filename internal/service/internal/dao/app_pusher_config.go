// =================================================================================
// This is auto-generated by GoFrame CLI tool only once. Fill this file as you wish.
// =================================================================================

package dao

import (
	"context"

	"github.com/L-LYR/pns/internal/model"
	"github.com/L-LYR/pns/internal/service/internal/dao/internal"
	"github.com/L-LYR/pns/internal/service/internal/do"
	"github.com/gogf/gf/v2/container/gvar"
	"github.com/gogf/gf/v2/encoding/gjson"
)

// _AppPusherConfigDao is the data access object for table app_pusher_config.
// You can define custom methods on it to extend its functionality as you wish.
type _AppPusherConfigDao struct {
	*internal.AppPusherConfigDao
}

var (
	// AppPusherConfig is globally public accessible object for table app_pusher_config operations.
	AppPusherConfig = _AppPusherConfigDao{
		internal.NewAppPusherConfigDao(),
	}
)

func FindConfigByKey(ctx context.Context, appId int, pusher model.PusherType) (*gvar.Var, error) {
	record, err := AppPusherConfig.
		Ctx(ctx).
		Fields("config").
		Where("pusherId", pusher).
		Where("appId", appId).
		One()
	if err != nil {
		return nil, err
	}
	return record.GMap().GetVar("config"), nil
}

func CreateConfig(ctx context.Context, config model.PusherConfig) error {
	_, err := AppPusherConfig.Ctx(ctx).Insert(
		do.AppPusherConfig{
			AppId:    config.AppId(),
			PusherId: config.PusherType(),
			Config:   gjson.NewWithTag(config, "json", true),
		},
	)
	return err
}

// only used in cache
func LoadAllPusherConfig(ctx context.Context) ([]model.PusherConfig, error) {
	records, err := AppPusherConfig.Ctx(ctx).All()
	if err != nil {
		return nil, err
	}
	result := make([]model.PusherConfig, 0, records.Len())
	for _, record := range records {
		m := record.GMap()
		config := model.NewEmptyPusherConfig(
			m.GetVar("appId").Int(),
			model.PusherType(m.GetVar("pusherId").Int8()),
		)
		if err := m.GetVar("config").Struct(config); err != nil {
			return nil, err
		}
		result = append(result, config)
	}
	return result, err

}
